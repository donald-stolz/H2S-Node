%******************************************************************************%
%                                                                              %
%                  NodeJS.en.tex for LaTeX                                 %
%                  Created on : Tue Mar 10 13:27:28 2015                       %
%                  Made by : Don Stolz <dstolz@student.42.us.org>              %
%                                                                              %
%******************************************************************************%

\documentclass{42-en}


%******************************************************************************%
%                                                                              %
%                                    Header                                    %
%                                                                              %
%******************************************************************************%
\begin{document}
\title{Node JS}
\member{Donald Stolz}{dstolz@student.42.us.org}
\summary {
 Learn backend development with Node JS.  
}
\maketitle

\tableofcontents


%******************************************************************************%
%                                                                              %
%                                  Foreword                                    %
%                                                                              %
%******************************************************************************%
\chapter{Foreword}



%******************************************************************************%
%                                                                              %
%                                 Introduction                                 %
%                                                                              %
%******************************************************************************%
\chapter{Introduction}

By now you may have heard the terms front-end and backend development. Front-end development refers to code written on the clients devices, and focuses mainly UI/UX development. So what is Backend Development? Backend development is a mix of servers, databases, and API’s that power your app.\\
What is a server? A server is a computer/device/program that is dedicated to managing network resources. Most any computer is capable of serving as a network server. A server serves information to our client. The information we need is stored in our database. How do we communicate with the server in order to get the proper information? We communicate with our application server through an Application Programming Interface, or an API. An API is a set of functions and procedures, it receives requests and returns responses.\\

Learn more about the internet, servers, and APIs:
\begin{itemize}\itemsep1pt
\item \href{https://www.youtube.com/watch?v=ZhEf7e4kopM&list=PLzdnOPI1iJNfMRZm5DDxco3UdsFegvuB7&index=2{How the internet works}
\item \href{https://www.youtube.com/watch?v=TQQA8RpKxqg}{What is a Computer Server?}
\item \href{https://www.youtube.com/watch?v=s7wmiS2mSXY}{What is an API?}
\end{itemize}


%******************************************************************************%
%                                                                              %
%                                  Goals                                       %
%                                                                              %
%******************************************************************************%
\chapter{Goals}

    By completing these exercises you will learn about creating servers and APIs work. You will learn about writing backend services with JavaScript.


%******************************************************************************%
%                                                                              %
%                             General instructions                             %
%                                                                              %
%******************************************************************************%
\chapter{General instructions}

    We will start with some simple guided lessons on the basics of setting up and testing a Node.js server. Once you've completed the basic lessons you will apply your new knowledge towards creating your own API for tracking Todos.


% Don't forget this line for piscine days to initiate the exercise counter at 0
\startexercices


%******************************************************************************%
%                                                                              %
%                             Hello World!                                     %
%                                                                              %
%******************************************************************************%
\chapter{Exercise \exercicenumber: Hello World!}
    It’s time setup our first Node.js project. What is Node.js? Node.js is a JavaScript runtime. Basically Node allows us to run JavaScript outside of the web browser.

	Let's start by creating a new directory called `Basics` from the Terminal. Now `cd` into our new directory and run `npm init`. Go ahead and just press enter through all the prompts, they're not important for our project.

	Once we have our project intialized we can add our first Node Package. Run `npm install --save express`. The `npm install` command add the express package to our project, using the `--save` flag saves it as a project dependency.

	Our directory should now consist of the `package.json` file and our `node_modules` folder. We will also add a `.gitignore` file. Inside this file simply write `node_modules` and git will now know to ignore our node_modules directory.

	Now to actually build our server! Create a file called `server.js`. Inside this file write the following code:

	\begin{figure}[H]
        \begin{center}
            \includegraphics[width=10cm]{WEB/NodeHelloWorld.png}
        \end{center}
    \end{figure}

	Let's setup our start script. Open up `package.json` and under the scripts object replace `test` with `start` and then replace the script's value with the command `node server.js`

	Finally our server is ready to run. From the root of your `Basics` project run `npm run start` and head to http://localhost:3000/ to check out your server.


	\info {
		Check out https://nodesource.com/blog/an-absolute-beginners-guide-to-using-npm/ for more information on npm.
	}

    \hint {
        Use `control + c` to quit your server.
    }


\newpage
% Don't forget this line in order to increment the exercise counter
\nextexercice

%******************************************************************************%
%                                                                              %
%                          Setting up endpoints                                %
%                                                                              %
%******************************************************************************%
\chapter{Exercise \exercicenumber: Setting up routes}

Now that we have our basic server setup we can start adding more endpoints to expand our functionalty. What is an endpoint? An endpoint is a URL pattern used to communicate with an API. Endpoints can also be differntiated by their HTTP methods. An HTTP method allows us to indicate the type of action we are trying to preform. Our current server consists of a single `GET` endpoint.

\info {
		Check out https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods for more information on the different types of HTTP methods.
	}

Let's first add a database so that we have some information for our new endpoints to access. Create a file called `db.json` in this file create a simple array of user objects with the fields `name` and `id`. It should look something like this.
TODO: Create code snippet or add picture

Now we can access our database by importing it the same way we imported the express library. Simply add `const db = require("./db.json");` to the top of our server.js file.

Setup a new `GET` endpoint called `/users`. It will be setup simarly to our `Hello World!` example, except it will return our database:
TODO: Create code snippet or add picture

Notice that along with the response we send back we also set the status code to 200. Status code 200 indicates that the request has succeeded. Check out the different status code values TODO:(link) here https://developer.mozilla.org/en-US/docs/Web/HTTP/Status 

Next, we will setup a route to retrieve an individual user from our database. Setup another `GET` endpoint and call it `/users/:id`. Using `:id` will allow us to retrieve `id` as a variable from the request parameters. Add the snippet below: TODO: Create code snippet or add picture

Notice the new status code 404. This indicates an error, specifically that the server could not find the requested resources.

\newpage
% Don't forget this line in order to increment the exercise counter
\nextexercice


%******************************************************************************%
%                                                                              %
%                      Setting up POST requests                                %
%                                                                              %
%******************************************************************************%
\chapter{Exercise \exercicenumber: Setting up POST requests}

We can fetch our entire db and individual users, now we will learn how to set up a `POST` endpoint so we can add new users to our database. In order to do this we will be adding a few additonal libraries. First run `npm install --save body-parser`. Then add the body-parser middleware to our express app: TODO: Snippet. We also be adding the `fs` library, this library comes with Node, so all we need to do is import it. Add `const fs = require("fs");` to the top of your file.

\hint {
		fs stands for filesystem
	}

Set up a new `POST` endpoint called `/users`, this will be exactly the same as our `GET` route except we will use `app.get('/users')`. In this route we will also be pulling the `name` variable out of `req.body`, this is what we setup the `body-parser` middleware for. We will check that name exists, if it doesn't we will return a `400` status. Next we will setup the new user object and assign it's `name` and `id` values. Once we have the object setup, we can push it to the database. However, simply push the new value to the database will not update the file itself. We will have to first convert our JSON array into a string, then use the `fs` module to write the stringified database to our JSON file. Follow this example: TODO: Create code snippet or add picture



\newpage
% Don't forget this line in order to increment the exercise counter
\nextexercice

%******************************************************************************%
%                                                                              %
%                      	   Testing with Postman                                %
%                                                                              %
%******************************************************************************%
\chapter{Exercise \exercicenumber: Setting up POST requests}

So we've setup a `POST` route, but how do we send data with our request? We will be using a tool called Postman to test our routes. Head to the Application directory and open Postman
\hint {
		You can also just use `command + space` and search Postman.
	}

Feel free to login with google or head straight to the app. Once you are inside you can quickly test our `GET` requests by add localhost:3000 as the `request URL` like so TODO: Add Hello World pic.

Now that we know how to setup a `GET` request we can setup our `POST` request in a similar way. Here we will also want to add a body for sending the name of the user to add. We will head to the `body` tab and select raw as our format. Next we will also need to specify that our data is JSON content. Then we can add create a JSON object to add a new user. You should get a response that says `Added New User to db` with a status of 200. TODO: Add GET pic

\hint {
		logging in with Google will allow you to save your routes which we will come in handy when your testing the Mandatory parts.
	}

The final tool you will want to add to your project before starting the Mandatory Parts is nodemon. Nodemon is a development tool that will automatically refresh our server whenever we make file changes, this way we will avoid having to manually shutdown and restart our server everytime we make changes. To add nodemon run `npm install --save-dev nodemon`. Then open your package.json file. Add a new script called "start-watch" and give it the value `nodemon server.js`. Now we can run `npm run start-watch` and nodemon will take care of refreshing our server. TODO: Add nodemon package.json pic


\newpage
% Don't forget this line in order to increment the exercise counter
\nextexercice

%******************************************************************************%
%                                                                              %
%                             Mandatory Part 1                                 %
%                                                                              %
%******************************************************************************%
\chapter{Mandatory part 1}

Now you are equiped with enough knowledge and tools to build your own API. You will be building an API to keep track of Todos. Your endpoints should be as followed:

\begin{itemize}\itemsep1pt
\item GET '/todos' -> Gets all Todos in database
\item GET '/todos/:id' -> Gets single Todo by ID
\item POST '/todos' -> Add new Todo to database
\item POST '/todos/:id' -> Update single Todo by ID
\item DELETE '/todos/:id' -> Delete single Todo by ID
\end{itemize}

Use a db.json like we did in our previous example for storage.


%******************************************************************************%
%                                                                              %
%                             Mandatory Part 2                                 %
%                                                                              %
%******************************************************************************%
\chapter{Mandatory part 2}

Now that we are pros at writing APIs we will connect our API to a proper database instance

TODO: Setup MongoDB and heroku
TODO: Setup mongoose
TODO: Update all routes

%******************************************************************************%
%                                                                              %
%                                 Bonus part                                   %
%                                                                              %
%******************************************************************************%
\chapter{Bonus part}

For a bonus you can setup batch delete and update endpoints


%******************************************************************************%
%                                                                              %
%                           Turn-in and peer-evaluation                        %
%                                                                              %
%******************************************************************************%
\chapter{Turn-in and peer-evaluation}


%******************************************************************************%
\end{document}